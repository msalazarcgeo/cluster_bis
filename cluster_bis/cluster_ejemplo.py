# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_cluster.ipynb.

# %% auto 0
__all__ = ['data_points', 'Clusters']

# %% ../nbs/00_cluster.ipynb 1
import nbdev; nbdev.nbdev_export()

# %% ../nbs/00_cluster.ipynb 2
from nbdev.showdoc import *
from nbdev.showdoc import show_doc

import matplotlib

# %% ../nbs/00_cluster.ipynb 4
class data_points:
    """Una clase que contiene a los datos"""
    def __init__(self, n, min_x=0, min_y=0, max_x=1, max_y=1, seed=None):
        if seed is not None:
            random.seed(seed)

        Xpoint = np.random.uniform(low=min_x, high=max_x, size=n)
        Ypoint = np.random.uniform(low=min_y, high=max_y, size=n)

        self.Points = [shapely.Point(x[0], x[1]) for x in zip(Xpoint, Ypoint)]

    @classmethod
    def from_list(cls, list_points):
        """Se genera los datos usando una lista de puntos"""
        toto = cls(0)
        toto.Points = list_points
        return toto

    def get_points(self):
        """Una funcion que para obtener los puntos"""
        return self.Points

    def get_Multypoint(self):
        """Regresa un objeto MultiPoint con los puntos"""
        return shapely.geometry.MultiPoint(self.Points)

    def get_X(self):
        """Regresa las coordenadas X"""
        return [x.x for x in self.Points]

    def get_Y(self):
        """Regresa las coordenadas X"""
        return [x.y for x in self.Points]

    def centroid(self):
        """Regresa el centroide de los puntos """
        return shapely.centroid(self.get_Multypoint())

    def as_array(self):
        """Regresa los puntos como un array"""
        list_arrays = np.array([(geom.xy[0][0], geom.xy[1][0]) for geom in self.Points])
        return list_arrays

    def add_points(self, data_points):
        """Agrega puntos de otra """
        self.Points = self.Points + data_points.Points
        return

# %% ../nbs/00_cluster.ipynb 6
class Clusters:
    """Una clase que contiene los clusters"""
    def __init__(self, data_structure):
        self.data_structure = data_structure

    def DBSCAN(self, eps=0.3, min_samples=5):
        """Realiza un DBSCAN clustering"""
        clustering = DBSCAN(eps=eps, min_samples=min_samples).fit(self.data_structure.as_array())
        self.data_structure.classes_DBSCAN = clustering.labels_
        return clustering

    def KMeans(self, n_clusters=4):
        """Realiza un KMeans clustering"""
        clustering = KMeans(n_clusters=n_clusters).fit(self.data_structure.as_array())
        self.data_structure.classes_Kmeans = clustering.labels_
        return clustering

    def HDBSCAN(self, min_cluster_size=5):
        """Realiza un HDBSCAN clustering"""
        clustering = HDBSCAN(min_cluster_size=min_cluster_size).fit(self.data_structure.as_array())
        self.data_structure.classes_HDBSCAN = clustering.labels_
        return clustering

    def OPTICS(self, min_samples=5):
        """Realiza un OPTICS clustering"""
        clustering = OPTICS(min_samples=min_samples).fit(self.data_structure.as_array())
        self.data_structure.classes_OPTICS = clustering.labels_
        return clustering
